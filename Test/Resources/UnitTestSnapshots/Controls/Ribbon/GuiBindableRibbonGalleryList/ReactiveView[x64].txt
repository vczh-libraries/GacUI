================================(1/5)================================
module <constructor>gacuisrc_unittest::GalleryItemTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace gacuisrc_unittest
{
    class GalleryItemTemplateConstructor
    {
        @cpp:Protected
        var self : ::gacuisrc_unittest::GalleryItemTemplate* = null of (::gacuisrc_unittest::GalleryItemTemplate*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::controls::GuiLabel* = null of (::presentation::controls::GuiLabel*);

        @cpp:Protected
        var ViewModel : ::GalleryItem^ = null of (::GalleryItem^);

        @cpp:Protected
        func <gacuisrc_unittest-GalleryItemTemplate>Initialize(<this> : ::gacuisrc_unittest::GalleryItemTemplate*) : (::system::Void)
        {
            (self = <this>);
            (ViewModel = <this>.ViewModel);
            {
                (self.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                (self.PreferredMinSize = {x : 72;} of (::presentation::Size));
            }
            (<precompile>0 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>0.CellPadding = 2 of (::system::Int64));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                <precompile>0.SetRowsAndColumns(3, 3);
                <precompile>0.SetRowOption(0, {composeType : Percentage; percentage : 0.5;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(2, {composeType : Percentage; percentage : 0.5;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(0, {composeType : Percentage; percentage : 0.5;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(2, {composeType : Percentage; percentage : 0.5;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>1 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>1.SetSite(1, 1, 1, 1);
            }
            {
                (<precompile>2 = new (::presentation::controls::GuiLabel*)(::presentation::theme::ThemeName::Label));
            }
            {
                <precompile>1.AddChild(<precompile>2.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>1);
            }
            {
                self.AddChild(<precompile>0);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = ((cast (string) ViewModel.Id) ?? "") of (::system::String);
                        ValueChanged(<bind-activator-result>);
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>2.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>2.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
        }

        new ()
        {
        }
    }
}

================================(2/5)================================
module <instance>gacuisrc_unittest::GalleryItemTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace gacuisrc_unittest
{
    @cpp:File("GalleryItemTemplate")
    @cpp:Friend(typeof(GalleryItemTemplateConstructor))
    class GalleryItemTemplate : ::presentation::templates::GuiTextListItemTemplate, GalleryItemTemplateConstructor
    {
        @cpp:Private
        var <parameter>ViewModel : GalleryItem^ = null of (::GalleryItem^);

        func GetViewModel() : (GalleryItem^)
        {
            return <parameter>ViewModel;
        }

        prop ViewModel : GalleryItem^{GetViewModel}

        new* (<ctor-parameter>ViewModel : GalleryItem^)
        {
            (<parameter>ViewModel = <ctor-parameter>ViewModel);
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("gacuisrc_unittest::GalleryItemTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<gacuisrc_unittest-GalleryItemTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(3/5)================================
module <constructor>gacuisrc_unittest::MainWindow;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace gacuisrc_unittest
{
    class MainWindowConstructor
    {
        @cpp:Protected
        var self : ::gacuisrc_unittest::MainWindow* = null of (::gacuisrc_unittest::MainWindow*);

        @cpp:Protected
        var tab : ::presentation::controls::GuiRibbonTab* = null of (::presentation::controls::GuiRibbonTab*);

        @cpp:Protected
        var group1 : ::presentation::controls::GuiRibbonGroup* = null of (::presentation::controls::GuiRibbonGroup*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiGraphicsComposition* = null of (::presentation::compositions::GuiGraphicsComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var tabPageBindable : ::presentation::controls::GuiRibbonTabPage* = null of (::presentation::controls::GuiRibbonTabPage*);

        @cpp:Protected
        var bindableGallery : ::presentation::controls::GuiBindableRibbonGalleryList* = null of (::presentation::controls::GuiBindableRibbonGalleryList*);

        @cpp:Protected
        func <gacuisrc_unittest-MainWindow>Initialize(<this> : ::gacuisrc_unittest::MainWindow*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.ClientSize = {x : 480; y : 320;} of (::presentation::Size));
            }
            {
                (self.Text = "GuiBindableRibbonGalleryList");
            }
            {
                (tab = new (::presentation::controls::GuiRibbonTab*)(::presentation::theme::ThemeName::RibbonTab));
                <this>.SetNamedObject("tab", tab);
            }
            {
                (tabPageBindable = new (::presentation::controls::GuiRibbonTabPage*)(::presentation::theme::ThemeName::CustomControl));
                <this>.SetNamedObject("tabPageBindable", tabPageBindable);
            }
            {
                (group1 = new (::presentation::controls::GuiRibbonGroup*)(::presentation::theme::ThemeName::RibbonGroup));
                <this>.SetNamedObject("group1", group1);
            }
            {
                (bindableGallery = new (::presentation::controls::GuiBindableRibbonGalleryList*)(::presentation::theme::ThemeName::RibbonGalleryList));
                <this>.SetNamedObject("bindableGallery", bindableGallery);
            }
            {
                (bindableGallery.ItemTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiListItemTemplate*)
                {
                    {
                        if (<viewModel> is (::GalleryItem^))
                        {
                            return new (::gacuisrc_unittest::GalleryItemTemplate*)((cast (::GalleryItem^) <viewModel>));
                        }
                    }
                    raise "Cannot find a matched control template to create.";
                });
            }
            {
                (bindableGallery.MinCount = 3 of (::system::Int64));
            }
            {
                (bindableGallery.MaxCount = 5 of (::system::Int64));
            }
            (<precompile>2 = bindableGallery.BoundsComposition);
            {
                (<precompile>2.PreferredMinSize = {x : 200;} of (::presentation::Size));
            }
            {
                var <collection> = group1.Items;
                <collection>.Add(bindableGallery);
            }
            {
                (group1.Text = "Bindable Gallery");
            }
            {
                var <collection> = tabPageBindable.Groups;
                <collection>.Add(group1);
            }
            (<precompile>1 = tabPageBindable.ContainerComposition);
            {
                (<precompile>1.PreferredMinSize = {y : 110;} of (::presentation::Size));
            }
            {
                (tabPageBindable.Text = "Bindable Gallery");
            }
            {
                var <collection> = tab.Pages;
                <collection>.Add(tabPageBindable);
            }
            (<precompile>0 = tab.BoundsComposition);
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 5; right : 0; bottom : (-1);} of (::presentation::Margin));
            }
            {
                self.AddChild(tab);
            }
            {
                (bindableGallery.ItemSource = self.items);
            }
        }

        new ()
        {
        }
    }
}

================================(4/5)================================
module <instance>gacuisrc_unittest::MainWindow;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace gacuisrc_unittest
{
    @cpp:File("MainWindow")
    @cpp:Friend(typeof(MainWindowConstructor))
    class MainWindow : ::presentation::controls::GuiWindow, MainWindowConstructor
    {
        var items : observe GalleryItem^[] = {new (GalleryItem^)(1); new (GalleryItem^)(2); new (GalleryItem^)(3); new (GalleryItem^)(4);};

        new* ()
            :::presentation::controls::GuiWindow(::presentation::theme::ThemeName::Window)
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("gacuisrc_unittest::MainWindow");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<gacuisrc_unittest-MainWindow>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::controls::GuiControlHost*));
        }
    }
}

================================(5/5)================================
module galleryitem;
using system::*;

class GalleryItem
{
    @cpp:Private
    var <prop>Id : int = 0;

    func GetId() : (int)
    {
        return <prop>Id;
    }

    func SetId(<value> : int) : (void)
    {
        (<prop>Id = <value>);
    }

    prop Id : int{GetId, SetId}

    new ()
    {
    }

    new (id : int)
    {
        (Id = id);
    }
}

